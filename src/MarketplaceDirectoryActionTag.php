<?php
/**
 * MarketplaceDirectoryActionTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */

namespace Fusio\Marketplace;

use GuzzleHttp\Exception\BadResponseException;
use Sdkgen\Client\Exception\ClientException;
use Sdkgen\Client\Exception\Payload;
use Sdkgen\Client\Exception\UnknownStatusCodeException;
use Sdkgen\Client\TagAbstract;

class MarketplaceDirectoryActionTag extends TagAbstract
{
    /**
     * Installs an existing action
     *
     * @param MarketplaceInstall $payload
     * @return MarketplaceAction
     * @throws MarketplaceMessageException
     * @throws ClientException
     */
    public function install(MarketplaceInstall $payload): MarketplaceAction
    {
        $url = $this->parser->url('/marketplace/directory/action', [
        ]);

        $options = [
            'headers' => [
                'Content-Type' => 'application/json',
            ],
            'query' => $this->parser->query([
            ], [
            ]),
            'json' => $payload,
        ];

        try {
            $response = $this->httpClient->request('POST', $url, $options);
            $body = $response->getBody();

            $data = $this->parser->parse((string) $body, MarketplaceAction::class);

            return $data;
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $body = $e->getResponse()->getBody();
            $statusCode = $e->getResponse()->getStatusCode();

            if ($statusCode === 400) {
                $data = $this->parser->parse((string) $body, MarketplaceMessage::class);

                throw new MarketplaceMessageException($data);
            }

            if ($statusCode === 404) {
                $data = $this->parser->parse((string) $body, MarketplaceMessage::class);

                throw new MarketplaceMessageException($data);
            }

            if ($statusCode === 500) {
                $data = $this->parser->parse((string) $body, MarketplaceMessage::class);

                throw new MarketplaceMessageException($data);
            }

            throw new UnknownStatusCodeException('The server returned an unknown status code: ' . $statusCode);
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }

    /**
     * Returns details of a specific action
     *
     * @param string $user
     * @param string $name
     * @return MarketplaceAction
     * @throws MarketplaceMessageException
     * @throws ClientException
     */
    public function get(string $user, string $name): MarketplaceAction
    {
        $url = $this->parser->url('/marketplace/directory/action/:user/:name', [
            'user' => $user,
            'name' => $name,
        ]);

        $options = [
            'headers' => [
            ],
            'query' => $this->parser->query([
            ], [
            ]),
        ];

        try {
            $response = $this->httpClient->request('GET', $url, $options);
            $body = $response->getBody();

            $data = $this->parser->parse((string) $body, MarketplaceAction::class);

            return $data;
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $body = $e->getResponse()->getBody();
            $statusCode = $e->getResponse()->getStatusCode();

            if ($statusCode === 400) {
                $data = $this->parser->parse((string) $body, MarketplaceMessage::class);

                throw new MarketplaceMessageException($data);
            }

            if ($statusCode === 404) {
                $data = $this->parser->parse((string) $body, MarketplaceMessage::class);

                throw new MarketplaceMessageException($data);
            }

            if ($statusCode === 500) {
                $data = $this->parser->parse((string) $body, MarketplaceMessage::class);

                throw new MarketplaceMessageException($data);
            }

            throw new UnknownStatusCodeException('The server returned an unknown status code: ' . $statusCode);
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }

    /**
     * Returns all available actions
     *
     * @param int|null $startIndex
     * @param int|null $count
     * @param string|null $query
     * @return MarketplaceActionCollection
     * @throws MarketplaceMessageException
     * @throws ClientException
     */
    public function getAll(?int $startIndex = null, ?int $count = null, ?string $query = null): MarketplaceActionCollection
    {
        $url = $this->parser->url('/marketplace/directory/action', [
        ]);

        $options = [
            'headers' => [
            ],
            'query' => $this->parser->query([
                'startIndex' => $startIndex,
                'count' => $count,
                'query' => $query,
            ], [
            ]),
        ];

        try {
            $response = $this->httpClient->request('GET', $url, $options);
            $body = $response->getBody();

            $data = $this->parser->parse((string) $body, MarketplaceActionCollection::class);

            return $data;
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $body = $e->getResponse()->getBody();
            $statusCode = $e->getResponse()->getStatusCode();

            if ($statusCode === 400) {
                $data = $this->parser->parse((string) $body, MarketplaceMessage::class);

                throw new MarketplaceMessageException($data);
            }

            if ($statusCode === 404) {
                $data = $this->parser->parse((string) $body, MarketplaceMessage::class);

                throw new MarketplaceMessageException($data);
            }

            if ($statusCode === 500) {
                $data = $this->parser->parse((string) $body, MarketplaceMessage::class);

                throw new MarketplaceMessageException($data);
            }

            throw new UnknownStatusCodeException('The server returned an unknown status code: ' . $statusCode);
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }



}
